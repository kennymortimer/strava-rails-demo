<!DOCTYPE html>
<html>
  <head>
    <title>Strava Dashboard</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:wght@400;500;600;700&family=Quantico:wght@400;700&display=swap" rel="stylesheet">
    
    <!-- Material Design Icons -->
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons+Outlined" rel="stylesheet">
    
    <link rel="icon" href="https://www.strava.com/favicon.ico" type="image/x-icon">
    
    <!-- Preload Strava logo -->
    <link rel="preload" href="<%= asset_path('strava_logo.svg') %>" as="image" type="image/svg+xml">
    
    <!-- html2canvas for screenshot functionality -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
  </head>

  <body class="dark-mode theme-purple">
    <!-- Theme Toggle Panel -->
    <div class="theme-toggle-panel">
      <div class="mode-toggle-wrapper">
        <div class="mode-toggle" id="mode-toggle">
          <span class="material-icons sun-icon">wb_sunny</span>
          <span class="material-icons moon-icon">nightlight_round</span>
        </div>
        <div class="tooltip" id="mode-tooltip">Switch to Light Mode</div>
      </div>
      
      <div class="color-option-wrapper">
        <div class="color-option color-purple active" data-theme="purple"></div>
        <div class="tooltip" id="purple-tooltip">Dark Mode Purple</div>
      </div>
      
      <div class="color-option-wrapper">
        <div class="color-option color-teal" data-theme="teal"></div>
        <div class="tooltip" id="teal-tooltip">Dark Mode Teal</div>
      </div>
      
      <div class="color-option-wrapper">
        <div class="color-option color-green" data-theme="green"></div>
        <div class="tooltip" id="green-tooltip">Dark Mode Green</div>
      </div>
      
      <div class="color-option-wrapper">
        <div class="color-option color-orange" data-theme="orange"></div>
        <div class="tooltip" id="orange-tooltip">Dark Mode Orange</div>
      </div>
      
      <div class="share-button-wrapper">
        <div class="share-button" id="share-button">
          <span class="material-icons">send</span>
        </div>
        <div class="tooltip" id="share-tooltip">Share Your Stats</div>
      </div>
    </div>
    
    <!-- Share Modal -->
    <div id="share-modal" class="share-modal">
      <div class="share-modal-content">
        <div class="share-modal-header">
          <h3>Share Your Stats</h3>
          <span class="close-modal">&times;</span>
        </div>
        <div class="share-modal-body">
          <div id="stats-image-container" class="stats-image-container">
            <!-- Stats image will be rendered here -->
          </div>
          <div class="share-options">
            <button class="share-option" id="download-image">
              <span class="material-icons">download</span>
              Download
            </button>
            <button class="share-option" id="copy-image">
              <span class="material-icons">content_copy</span>
              Copy
            </button>
            <button class="share-option" id="share-twitter">
              <span class="material-icons">share</span>
              Share
            </button>
          </div>
        </div>
      </div>
    </div>
    
    <%= yield %>

    <!-- Theme Toggle JavaScript -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // Get elements
        const body = document.body;
        const modeToggle = document.getElementById('mode-toggle');
        const colorOptions = document.querySelectorAll('.color-option');
        const modeTooltip = document.getElementById('mode-tooltip');
        const purpleTooltip = document.getElementById('purple-tooltip');
        const tealTooltip = document.getElementById('teal-tooltip');
        const greenTooltip = document.getElementById('green-tooltip');
        const orangeTooltip = document.getElementById('orange-tooltip');
        const shareTooltip = document.getElementById('share-tooltip');
        
        // Check for saved preferences
        const savedMode = localStorage.getItem('stravaThemeMode') || 'dark';
        const savedTheme = localStorage.getItem('stravaThemeColor') || 'purple';
        
        // Apply saved preferences
        if (savedMode === 'light') {
          body.classList.remove('dark-mode');
          body.classList.add('light-mode');
        } else {
          body.classList.remove('light-mode');
          body.classList.add('dark-mode');
        }
        
        // Apply saved color theme
        updateThemeClass(savedTheme);
        
        // Update active color option
        updateActiveColorOption(savedTheme);
        
        // Update tooltips based on current mode
        updateTooltips();
        
        // Mode toggle click handler
        modeToggle.addEventListener('click', function() {
          if (body.classList.contains('dark-mode')) {
            body.classList.remove('dark-mode');
            body.classList.add('light-mode');
            localStorage.setItem('stravaThemeMode', 'light');
          } else {
            body.classList.remove('light-mode');
            body.classList.add('dark-mode');
            localStorage.setItem('stravaThemeMode', 'dark');
          }
          
          // Update tooltips after mode change
          updateTooltips();
        });
        
        // Color option click handlers
        colorOptions.forEach(option => {
          option.addEventListener('click', function() {
            const theme = this.dataset.theme;
            updateThemeClass(theme);
            updateActiveColorOption(theme);
            localStorage.setItem('stravaThemeColor', theme);
          });
        });
        
        // Helper function to update theme class
        function updateThemeClass(theme) {
          // Remove all theme classes
          body.classList.remove('theme-purple', 'theme-teal', 'theme-green', 'theme-orange');
          // Add the selected theme class
          body.classList.add('theme-' + theme);
        }
        
        // Helper function to update active color option
        function updateActiveColorOption(theme) {
          colorOptions.forEach(option => {
            if (option.dataset.theme === theme) {
              option.classList.add('active');
            } else {
              option.classList.remove('active');
            }
          });
        }
        
        // Helper function to update tooltips based on current mode
        function updateTooltips() {
          const currentMode = body.classList.contains('dark-mode') ? 'Dark' : 'Light';
          const oppositeMode = body.classList.contains('dark-mode') ? 'Light' : 'Dark';
          
          modeTooltip.textContent = `Switch to ${oppositeMode} Mode`;
          purpleTooltip.textContent = `${currentMode} Mode Purple`;
          tealTooltip.textContent = `${currentMode} Mode Teal`;
          greenTooltip.textContent = `${currentMode} Mode Green`;
          orangeTooltip.textContent = `${currentMode} Mode Orange`;
          shareTooltip.textContent = 'Share Your Stats';
        }
      });
    </script>
    
    <!-- Share Functionality -->
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // Get share elements
        const shareButton = document.getElementById('share-button');
        const shareModal = document.getElementById('share-modal');
        const closeModal = document.querySelector('.close-modal');
        const downloadButton = document.getElementById('download-image');
        const copyButton = document.getElementById('copy-image');
        const shareNativeButton = document.getElementById('share-twitter');
        const statsImageContainer = document.getElementById('stats-image-container');
        
        // Share button click handler
        shareButton.addEventListener('click', function() {
          // Show loading indicator
          statsImageContainer.innerHTML = '';
          const loadingIndicator = document.createElement('div');
          loadingIndicator.className = 'loading-indicator';
          statsImageContainer.appendChild(loadingIndicator);
          
          // Show the modal
          shareModal.classList.add('active');
          
          // Generate the stats image
          generateStatsImage();
        });
        
        // Close modal when clicking the X
        closeModal.addEventListener('click', function() {
          shareModal.classList.remove('active');
        });
        
        // Close modal when clicking outside the content
        window.addEventListener('click', function(event) {
          if (event.target === shareModal) {
            shareModal.classList.remove('active');
          }
        });
        
        // Download image button
        downloadButton.addEventListener('click', function() {
          const image = document.querySelector('#stats-image-container img');
          if (image) {
            // Create a temporary link and trigger download
            const link = document.createElement('a');
            link.download = 'strava-stats.png';
            link.href = image.src;
            link.click();
          }
        });
        
        // Copy to clipboard button
        copyButton.addEventListener('click', function() {
          const image = document.querySelector('#stats-image-container img');
          if (image) {
            // Check if the Clipboard API is supported
            if (navigator.clipboard && window.ClipboardItem) {
              fetch(image.src)
                .then(res => res.blob())
                .then(blob => {
                  // Create a ClipboardItem and write to clipboard
                  const item = new ClipboardItem({ 'image/png': blob });
                  navigator.clipboard.write([item]).then(function() {
                    alert('Image copied to clipboard!');
                  }, function(error) {
                    console.error('Could not copy image: ', error);
                    fallbackCopyMethod(image);
                  });
                });
            } else {
              fallbackCopyMethod(image);
            }
          }
        });
        
        // Fallback copy method
        function fallbackCopyMethod(image) {
          // Create a fallback message
          const fallbackMsg = document.createElement('div');
          fallbackMsg.className = 'fallback-message';
          fallbackMsg.textContent = 'Direct copying not supported in this browser. Please use the download button instead.';
          
          // Check if message already exists
          const existingMsg = document.querySelector('.fallback-message');
          if (!existingMsg) {
            document.querySelector('.share-options').appendChild(fallbackMsg);
          }
          
          // Focus on download button as alternative
          document.getElementById('download-image').focus();
        }
        
        // Native share button
        shareNativeButton.addEventListener('click', function() {
          const image = document.querySelector('#stats-image-container img');
          if (image) {
            if (navigator.share) {
              fetch(image.src)
                .then(res => res.blob())
                .then(blob => {
                  // Check if sharing files is supported
                  if (navigator.canShare && navigator.canShare({ files: [new File([blob], 'strava-stats.png', { type: 'image/png' })] })) {
                    const file = new File([blob], 'strava-stats.png', { type: 'image/png' });
                    navigator.share({
                      title: 'My Strava Stats',
                      text: 'Check out my Strava stats!',
                      files: [file]
                    }).then(() => {
                      console.log('Share successful');
                    }).catch((error) => {
                      console.log('Sharing failed', error);
                      shareWithoutFile(image);
                    });
                  } else {
                    shareWithoutFile(image);
                  }
                });
            } else {
              fallbackCopyMethod(image);
            }
          }
        });
        
        // Share without file (fallback)
        function shareWithoutFile(image) {
          if (navigator.share) {
            navigator.share({
              title: 'My Strava Stats',
              text: 'Check out my Strava stats!',
              url: window.location.href
            }).then(() => {
              console.log('Share successful');
            }).catch((error) => {
              console.log('Sharing failed', error);
              fallbackCopyMethod(image);
            });
          } else {
            fallbackCopyMethod(image);
          }
        }
        
        // Function to generate the stats image using html2canvas
        function generateStatsImage() {
          // Get the dashboard element to capture
          const dashboardElement = document.querySelector('.strava-dashboard');
          
          if (!dashboardElement) {
            console.error('Dashboard element not found');
            return;
          }
          
          // Create a clone of the dashboard to modify for capture
          const clonedDashboard = dashboardElement.cloneNode(true);
          
          // Apply styles to make it look like a share card
          clonedDashboard.style.width = '920px';
          clonedDashboard.style.height = 'auto';
          clonedDashboard.style.padding = '40px';
          clonedDashboard.style.margin = '0';
          clonedDashboard.style.position = 'absolute';
          clonedDashboard.style.left = '-9999px';
          clonedDashboard.style.top = '-9999px';
          clonedDashboard.style.borderRadius = '10px';
          
          // Get current theme colors
          const computedStyle = getComputedStyle(document.documentElement);
          const primaryColor = computedStyle.getPropertyValue('--primary-color').trim() || '#ba1fd9';
          
          // Add a border with the primary color
          clonedDashboard.style.border = `20px solid ${primaryColor}`;
          
          // Remove any elements we don't want in the screenshot
          const elementsToRemove = clonedDashboard.querySelectorAll('.year-selector, .dashboard-footer');
          elementsToRemove.forEach(el => {
            if (el && el.parentNode) {
              el.parentNode.removeChild(el);
            }
          });
          
          // Add a footer with Strava logo and generation date
          const footer = document.createElement('div');
          footer.style.textAlign = 'center';
          footer.style.marginTop = '40px';
          footer.style.padding = '20px 0';
          footer.style.borderTop = '1px solid var(--border-color)';
          
          // Create Strava logo
          const stravaLogo = document.createElement('div');
          stravaLogo.innerHTML = `<svg width="50" height="50" viewBox="0 0 48 48" fill="white" xmlns="http://www.w3.org/2000/svg">
            <path d="M23.6,24.8l3.1,6.2l-3.1,6.1h6.5l3.1-6.1l-3.1-6.2H23.6z M14.1,24.8l3.1,6.2l-3.1,6.1h6.5l3.1-6.1l-3.1-6.2H14.1z M33.1,24.8l3.1,6.2l-3.1,6.1h6.5l3.1-6.1l-3.1-6.2H33.1z M26.5,11.1l-5.4,10.7h10.8L26.5,11.1z"/>
          </svg>`;
          stravaLogo.style.margin = '0 auto 10px auto';
          
          const stravaText = document.createElement('div');
          stravaText.textContent = 'Powered by Strava';
          stravaText.style.marginBottom = '10px';
          stravaText.style.fontSize = '18px';
          
          const dateText = document.createElement('div');
          dateText.textContent = `Generated on ${new Date().toLocaleDateString()}`;
          dateText.style.fontSize = '14px';
          dateText.style.color = 'var(--text-color-secondary)';
          
          footer.appendChild(stravaLogo);
          footer.appendChild(stravaText);
          footer.appendChild(dateText);
          clonedDashboard.appendChild(footer);
          
          // Add the cloned element to the body temporarily
          document.body.appendChild(clonedDashboard);
          
          // Use html2canvas to capture the element
          html2canvas(clonedDashboard, {
            backgroundColor: null,
            scale: 2, // Higher scale for better quality
            logging: false,
            allowTaint: true,
            useCORS: true,
            onclone: function(clonedDoc) {
              // Additional modifications to the cloned document if needed
              const clonedElement = clonedDoc.querySelector('.strava-dashboard');
              if (clonedElement) {
                // Make sure all images are loaded
                const images = clonedElement.querySelectorAll('img');
                images.forEach(img => {
                  if (img.complete) return;
                  img.style.opacity = '0';
                  img.onload = function() {
                    img.style.opacity = '1';
                  };
                });
              }
            }
          }).then(canvas => {
            // Convert canvas to image
            const image = new Image();
            image.src = canvas.toDataURL('image/png');
            image.style.width = '100%';
            image.style.borderRadius = '10px';
            image.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';
            
            // Clear the container and add the image
            statsImageContainer.innerHTML = '';
            statsImageContainer.appendChild(image);
            
            // Remove the cloned element
            document.body.removeChild(clonedDashboard);
          }).catch(error => {
            console.error('Error generating image:', error);
            statsImageContainer.innerHTML = '<div class="error-message">Error generating image. Please try again.</div>';
            
            // Remove the cloned element
            if (document.body.contains(clonedDashboard)) {
              document.body.removeChild(clonedDashboard);
            }
          });
        }
      });
    </script>
  </body>
</html>
